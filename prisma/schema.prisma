generator client {
  provider = "prisma-client-js"


}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  country       String?
  number        String?
  address       String?
  city          String?
  occupation    String?
  status        UserStatus @default(UNASSIGNED)
  contact       String?
  profileImage  String?
  email         String          @unique
  vetted        Boolean         @default(false)
  emailVerified DateTime?
  image         String?
  bio           String?
  score         Int    @default(0)
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  role         UserRole   @default(USER)
  testimony    Testimonial?
  reviews  Review[]
  reports  Report[]
  membership Member[]
  payments Payment[]
  enrollments CourseEnrollment[] 
}
model Account {
  id    String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id String @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@id([userId, credentialID])
}

model Course {
  id  String  @id @default(cuid())
  name String
  registrationCost String 
  tuitionCost  String
  timespan   String
  lectureNumber String
  startDate  String
  endDate    String
  classSize  String
  image      String?
  requirements  String
  assignments   Assignment[]
  students      CourseEnrollment[] // new line
  courseGroups  CourseGroup[]      // new line
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model  Assignment {
  id String @id @default(cuid())
  lectureNumber String
  submissionDate String
  question   String
  answer  String
  courseId String
  course Course @relation(fields: [courseId],references: [id],onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt   DateTime   @updatedAt
} 

model Testimonial {
  id  String @id @default(cuid())
  name String 
  image String
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  href String
  userId String @unique
  user User  @relation(fields: [userId],references: [id])
}


model Job {
  id String @id @default(cuid())
  name String @unique
  image String?
  content String 
  stack  String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Question {
  id String  @id @default(cuid())
  label String
  question String 
  type    QuestionType @default(SINGLE)
  answer String[]
  options Option[]
  quizzId String 
  quizz Quizz @relation(fields: [quizzId],references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
enum QuestionType {
  SINGLE
  MULTIPLE
}
model Option  {
  id  String @default(cuid())
  label String
  questionId String @unique
  question Question @relation(fields: [questionId],references: [id],onDelete: Cascade)
}


model Quizz {
  id String @id @default(cuid())
  name String
  description String 
  questions Question[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id String @id @default(cuid())
  name String
   members       Member[]
  courseGroups  CourseGroup[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  

}

model Member {
  id String @id @default(cuid())
  memberId String 
  role GroupRole @default(FULLSTACK)
  user User @relation(fields: [memberId],references: [id],onDelete: Cascade)
  groupId String 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  group Group @relation(fields:[groupId],references: [id] ,onDelete: Cascade)
  @@unique([memberId, groupId])
}

model Review {
  id String @id @default(cuid())
  message String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  for String 
  authorId String 
  author User @relation(fields: [authorId],references: [id], onDelete: Cascade)
}

model Report {
  id String @id @default(cuid())
  report String 
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id],onDelete: Cascade)
}
model CourseEnrollment {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model CourseGroup {
  id        String   @id @default(cuid())
  courseId  String
  groupId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  group  Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([courseId, groupId])
}


model Payment  {
  id String @id @default(cuid())
  method String
  amount String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  senderId String
  sender User @relation(fields:[senderId], references:[id])
}

enum UserRole {
  ADMIN
  USER
  BLOCKED
  UNAUTHENTICATED
  EMPLOYEE
  CLIENT
}

enum GroupRole {
  LEAD
  FRONTEND
  BACKEND
  FULLSTACK
}

enum UserStatus {
  COMPLETED
  UNASSIGNED
  ONGOING
  UNVETTED
  
}